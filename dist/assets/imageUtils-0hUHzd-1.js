const e=e=>new Promise((t,o)=>{const r=new FileReader;r.onload=()=>t(r.result),r.onerror=e=>o(e),r.readAsDataURL(e)}),t=e=>e&&e.type.startsWith("image/"),o=(e,t=5)=>{const o=1024*t*1024;return e.size<=o},r=(e,t=["jpg","jpeg","png","webp"])=>{const o=e.name.split(".").pop().toLowerCase();return t.some(e=>e.toLowerCase()===o||`${e.toLowerCase()}`===o)},a=(e,t=1920,o=1080,r=.8)=>new Promise((a,n)=>{const s=document.createElement("canvas"),i=s.getContext("2d"),w=new Image;w.onload=()=>{let{width:n,height:p}=w;n>t&&(p=p*t/n,n=t),p>o&&(n=n*o/p,p=o),s.width=n,s.height=p,i.drawImage(w,0,0,n,p);const c=s.toDataURL(e.type,r);a(c)},w.onerror=n,w.src=URL.createObjectURL(e)}),n=async(n,s={})=>{const{maxSizeMB:i=5,allowedFormats:w=["jpg","jpeg","png","webp"],maxWidth:p=1920,maxHeight:c=1080,quality:m=.8,useCompression:g=!0}=s;if(!t(n))throw new Error("Файл має бути зображенням");if(!o(n,i))throw new Error(`Максимальний розмір файлу: ${i}MB`);if(!r(n,w))throw new Error(`Дозволені формати: ${w.join(", ")}`);return g?await a(n,p,c,m):await e(n)};export{a as compressImage,e as fileToBase64,t as isImageFile,n as processImageUpload,r as validateFileFormat,o as validateFileSize};
