/**
 * –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ localStorage —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ä–æ–∑–º—ñ—Ä—É
 */

/**
 * –û—Ç—Ä–∏–º—É—î —Ä–æ–∑–º—ñ—Ä localStorage –≤ –±–∞–π—Ç–∞—Ö
 * @returns {number} - —Ä–æ–∑–º—ñ—Ä –≤ –±–∞–π—Ç–∞—Ö
 */
export const getLocalStorageSize = () => {
  let total = 0
  for (const key in localStorage) {
    if (localStorage.hasOwnProperty(key)) {
      total += localStorage[key].length + key.length
    }
  }
  return total
}

/**
 * –§–æ—Ä–º–∞—Ç—É—î —Ä–æ–∑–º—ñ—Ä —É –∑—Ä—É—á–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ
 * @param {number} bytes - —Ä–æ–∑–º—ñ—Ä –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string} - –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫
 */
export const formatSize = bytes => {
  if (bytes === 0) return '0 Bytes'
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –≤ localStorage
 * @param {string} data - –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
 * @param {string} key - –∫–ª—é—á –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
 * @returns {boolean} - —á–∏ –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏
 */
export const canStoreInLocalStorage = (data, key = 'test') => {
  try {
    const testKey = `__storage_test_${key}`
    localStorage.setItem(testKey, data)
    localStorage.removeItem(testKey)
    return true
  } catch (e) {
    return false
  }
}

/**
 * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è localStorage
 * @returns {object} - –æ–±'—î–∫—Ç –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
 */
export const getStorageStats = () => {
  const totalSize = getLocalStorageSize()
  const maxSize = 10 * 1024 * 1024 // 10MB –ø—Ä–∏–±–ª–∏–∑–Ω–∏–π –ª—ñ–º—ñ—Ç
  const usagePercent = Math.round((totalSize / maxSize) * 100)

  const itemsStats = []
  for (const key in localStorage) {
    if (localStorage.hasOwnProperty(key)) {
      const itemSize = localStorage[key].length + key.length
      itemsStats.push({
        key,
        size: itemSize,
        formattedSize: formatSize(itemSize),
      })
    }
  }

  // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º
  itemsStats.sort((a, b) => b.size - a.size)

  return {
    totalSize,
    formattedTotalSize: formatSize(totalSize),
    maxSize,
    formattedMaxSize: formatSize(maxSize),
    usagePercent,
    itemsCount: itemsStats.length,
    items: itemsStats,
  }
}

/**
 * –û—á–∏—â–∞—î –Ω–∞–π–±—ñ–ª—å—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ localStorage
 * @param {number} count - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
 */
export const cleanLargestItems = (count = 1) => {
  const stats = getStorageStats()
  const itemsToDelete = stats.items.slice(0, count)

  itemsToDelete.forEach(item => {
    localStorage.removeItem(item.key)
    console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${item.key} (${item.formattedSize})`)
  })

  return itemsToDelete
}

/**
 * –õ–æ–≥—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É localStorage –≤ –∫–æ–Ω—Å–æ–ª—å
 */
export const logStorageStats = () => {
  const stats = getStorageStats()

  console.group('üìä localStorage Statistics')
  console.log(
    `üì¶ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: ${stats.formattedTotalSize} / ${stats.formattedMaxSize} (${stats.usagePercent}%)`
  )
  console.log(`üìÑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${stats.itemsCount}`)

  if (stats.items.length > 0) {
    console.group('üìã –ù–∞–π–±—ñ–ª—å—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏:')
    stats.items.slice(0, 5).forEach((item, index) => {
      console.log(`${index + 1}. ${item.key}: ${item.formattedSize}`)
    })
    console.groupEnd()
  }

  if (stats.usagePercent > 80) {
    console.warn('‚ö†Ô∏è localStorage –º–∞–π–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π! –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –æ—á–∏—â–µ–Ω–Ω—è.')
  }

  console.groupEnd()
}
